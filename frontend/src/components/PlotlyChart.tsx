'use client'

import { useEffect, useRef, useState } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Download, Maximize2, AlertTriangle } from 'lucide-react'
import { Alert, AlertDescription } from '@/components/ui/alert'

interface PlotlyChartProps {
  data: any // This will be the JSON data from your insightai system
  height?: number
  className?: string
}

// This component is the bridge between your insightai backend and the frontend visualization
// It takes the JSON data generated by your Python plotly code and renders it in the browser
export default function PlotlyChart({ data, height = 400, className = '' }: PlotlyChartProps) {
  // We use a ref to access the DOM element where Plotly will render the chart
  const plotRef = useRef<HTMLDivElement>(null)
  // State to track if Plotly library is loaded and ready
  const [isPlotlyLoaded, setIsPlotlyLoaded] = useState(false)
  // State to handle any rendering errors that might occur
  const [error, setError] = useState<string | null>(null)
  // State to track if the chart is currently being rendered
  const [isRendering, setIsRendering] = useState(false)

  // This effect handles loading the Plotly library dynamically
  // We do this because Plotly is a large library and we only want to load it when needed
  useEffect(() => {
    const loadPlotly = async () => {
      try {
        // Check if Plotly is already loaded in the browser
        if (typeof window !== 'undefined' && (window as any).Plotly) {
          setIsPlotlyLoaded(true)
          return
        }

        // Dynamically import Plotly to avoid SSR issues and reduce initial bundle size
        const Plotly = await import('plotly.js-dist-min')
        
        // Make Plotly available globally so we can use it in other functions
        ;(window as any).Plotly = Plotly.default || Plotly
        setIsPlotlyLoaded(true)
      } catch (err) {
        console.error('Failed to load Plotly:', err)
        setError('Failed to load charting library. Please refresh the page and try again.')
      }
    }

    loadPlotly()
  }, [])

  // This effect handles the actual chart rendering when data changes
  useEffect(() => {
    // Don't try to render if Plotly isn't loaded or we don't have data
    if (!isPlotlyLoaded || !data || !plotRef.current) return

    const renderChart = async () => {
      setIsRendering(true)
      setError(null)

      try {
        const Plotly = (window as any).Plotly
        
        // Clear any existing plot in the container
        Plotly.purge(plotRef.current)

        // The data from your insightai system should already be in Plotly JSON format
        // This is because your Python code uses plotly.write_json() which creates the right structure
        const plotData = data.data || []
        const plotLayout = {
          ...data.layout,
          // Override some layout settings for better web display
          height: height,
          margin: { t: 50, r: 50, b: 50, l: 50 },
          // Ensure the plot is responsive
          responsive: true,
          // Use a clean, professional color scheme
          colorway: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#F97316', '#06B6D4', '#84CC16']
        }
        
        // Configuration for the plot controls and behavior
        const plotConfig = {
          // Show the Plotly toolbar with useful controls
          displayModeBar: true,
          // Customize which buttons appear in the toolbar
          modeBarButtonsToAdd: [
            {
              name: 'Download as SVG',
              icon: Plotly.Icons.camera,
              click: function(gd: any) {
                Plotly.downloadImage(gd, { format: 'svg', filename: 'chart' })
              }
            }
          ],
          // Remove some buttons we don't need for a cleaner interface
          modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d'],
          // Make the plot responsive to window resizing
          responsive: true,
          // Add attribution to respect Plotly's requirements
          displaylogo: false
        }

        // Create the interactive plot
        await Plotly.newPlot(plotRef.current, plotData, plotLayout, plotConfig)

        // Add a resize listener to handle window size changes gracefully
        const resizeObserver = new ResizeObserver(() => {
          if (plotRef.current) {
            Plotly.Plots.resize(plotRef.current)
          }
        })
        
        if (plotRef.current && plotRef.current.parentElement) {
          resizeObserver.observe(plotRef.current.parentElement)
        }

        // Store the observer for cleanup
        ;(plotRef.current as any)._resizeObserver = resizeObserver

      } catch (err) {
        console.error('Error rendering chart:', err)
        setError('Failed to render chart. The data format might be incompatible.')
      } finally {
        setIsRendering(false)
      }
    }

    renderChart()

    // Cleanup function to remove event listeners when component unmounts
    return () => {
      if (plotRef.current && (plotRef.current as any)._resizeObserver) {
        ;(plotRef.current as any)._resizeObserver.disconnect()
      }
    }
  }, [isPlotlyLoaded, data, height])

  // Function to download the current chart as an image
  const downloadChart = () => {
    if (plotRef.current && (window as any).Plotly) {
      const Plotly = (window as any).Plotly
      
      // Generate a meaningful filename based on the chart title
      const title = data?.layout?.title?.text || data?.layout?.title || 'chart'
      const filename = title.toLowerCase().replace(/[^a-z0-9]/g, '-') + '-' + Date.now()
      
      // Download as PNG for best compatibility
      Plotly.downloadImage(plotRef.current, {
        format: 'png',
        width: 1200,
        height: 800,
        filename: filename
      })
    }
  }

  // Show loading state while Plotly library is being loaded
  if (!isPlotlyLoaded) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center" style={{ height }}>
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
            <p className="text-sm text-gray-600">Loading chart library...</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  // Show error state if something went wrong
  if (error) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center" style={{ height }}>
          <Alert className="max-w-md">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    )
  }

  // Show message if no data is provided
  if (!data) {
    return (
      <Card className={className}>
        <CardContent className="flex items-center justify-center" style={{ height }}>
          <p className="text-gray-500">No chart data available</p>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className={className}>
      <CardContent className="p-4">
        {/* Chart header with title and download button */}
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">
            {data?.layout?.title?.text || data?.layout?.title || 'Chart'}
          </h3>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={downloadChart}>
              <Download className="h-4 w-4 mr-1" />
              Download
            </Button>
          </div>
        </div>

        {/* The actual chart container where Plotly will render */}
        <div className="relative">
          {isRendering && (
            <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10">
              <div className="text-center">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2"></div>
                <p className="text-sm text-gray-600">Rendering chart...</p>
              </div>
            </div>
          )}
          
          {/* This div is where Plotly will actually draw the chart */}
          <div 
            ref={plotRef} 
            style={{ height, width: '100%' }}
            className="plotly-chart-container"
          />
        </div>
      </CardContent>
    </Card>
  )
}

// Helper function to validate if data is in the correct Plotly format
export function isValidPlotlyData(data: any): boolean {
  try {
    // Basic validation to ensure the data structure is what Plotly expects
    return (
      data &&
      typeof data === 'object' &&
      (Array.isArray(data.data) || data.data) &&
      (typeof data.layout === 'object' || !data.layout)
    )
  } catch {
    return false
  }
}