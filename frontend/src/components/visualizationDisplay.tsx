'use client';

import React, { useEffect, useRef } from 'react';

// Interface for visualization data structure
interface VisualizationData {
  filename: string;
  data: any;
  created_at: string;
}

interface VisualizationDisplayProps {
  visualizations: VisualizationData[];
}

// Individual chart component that renders a single Plotly visualization
const PlotlyChart: React.FC<{ data: any; filename: string }> = ({ data, filename }) => {
  const chartRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Function to load and render Plotly chart
    const loadPlotly = async () => {
      try {
        // Dynamically import Plotly to avoid SSR issues
        const Plotly = await import('plotly.js-dist-min');
        
        if (chartRef.current && data) {
          // Clear any existing content
          chartRef.current.innerHTML = '';
          
          // Extract Plotly data structure
          // The AI generates JSON that should contain 'data' and 'layout' properties
          const plotData = data.data || data;
          const plotLayout = data.layout || {
            title: filename.replace('.json', ''),
            autosize: true,
            margin: { l: 50, r: 50, t: 50, b: 50 }
          };
          
          // Configure plot options for better responsiveness
          const plotConfig = {
            responsive: true,
            displayModeBar: true,
            displaylogo: false,
            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d']
          };

          // Create the plot
          await Plotly.newPlot(chartRef.current, plotData, plotLayout, plotConfig);
          
          // Make it responsive to window resizing
          const handleResize = () => {
            if (chartRef.current) {
              Plotly.Plots.resize(chartRef.current);
            }
          };
          
          window.addEventListener('resize', handleResize);
          return () => window.removeEventListener('resize', handleResize);
        }
      } catch (error) {
        console.error('Error loading Plotly chart:', error);
        if (chartRef.current) {
          chartRef.current.innerHTML = `
            <div class="p-4 bg-red-50 border border-red-200 rounded-lg">
              <p class="text-red-800">Error loading visualization: ${error}</p>
            </div>
          `;
        }
      }
    };

    loadPlotly();
  }, [data, filename]);

  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4">
      <div className="mb-3">
        <h4 className="text-lg font-medium text-black">{filename.replace('.json', '')}</h4>
        <p className="text-sm text-gray-600">Interactive visualization generated by AI</p>
      </div>
      <div 
        ref={chartRef} 
        className="w-full h-96 bg-gray-50 rounded border border-gray-100"
        style={{ minHeight: '400px' }}
      />
    </div>
  );
};

// Alternative chart component for when Plotly fails to load
const FallbackChart: React.FC<{ data: any; filename: string }> = ({ data, filename }) => {
  return (
    <div className="bg-white border border-gray-200 rounded-lg p-4">
      <div className="mb-3">
        <h4 className="text-lg font-medium text-black">{filename.replace('.json', '')}</h4>
        <p className="text-sm text-gray-600">Visualization data (Plotly not available)</p>
      </div>
      <div className="bg-gray-50 border border-gray-200 rounded p-4">
        <div className="text-center py-8">
          <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          <p className="text-gray-600 mb-2">Chart data available</p>
          <details className="text-left">
            <summary className="cursor-pointer text-blue-600 hover:text-blue-800">View raw data</summary>
            <pre className="mt-2 text-xs text-gray-700 overflow-auto max-h-40 bg-white p-2 border rounded">
              {JSON.stringify(data, null, 2)}
            </pre>
          </details>
        </div>
      </div>
    </div>
  );
};

const VisualizationDisplay: React.FC<VisualizationDisplayProps> = ({ visualizations }) => {
  // State to track if Plotly is available
  const [plotlyAvailable, setPlotlyAvailable] = React.useState<boolean | null>(null);

  // Check if Plotly can be loaded
  useEffect(() => {
    const checkPlotly = async () => {
      try {
        await import('plotly.js-dist-min');
        setPlotlyAvailable(true);
      } catch (error) {
        console.warn('Plotly not available, using fallback display');
        setPlotlyAvailable(false);
      }
    };
    
    checkPlotly();
  }, []);

  if (visualizations.length === 0) {
    return (
      <div className="text-center py-8">
        <svg className="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
        <p className="text-gray-600">No visualizations generated yet. Ask a question that requests charts or graphs to see visualizations here.</p>
      </div>
    );
  }

  if (plotlyAvailable === null) {
    return (
      <div className="text-center py-8">
        <div className="inline-flex items-center space-x-2">
          <svg className="animate-spin w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <span className="text-gray-600">Loading visualization engine...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with count */}
      <div className="flex items-center justify-between">
        <p className="text-sm text-gray-600">
          {visualizations.length} visualization{visualizations.length !== 1 ? 's' : ''} generated
        </p>
        <div className="text-xs text-gray-500">
          {plotlyAvailable ? 'Interactive charts enabled' : 'Static view (Plotly unavailable)'}
        </div>
      </div>

      {/* Visualization grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {visualizations.map((viz, index) => (
          <div key={index} className="bg-white">
            {plotlyAvailable ? (
              <PlotlyChart data={viz.data} filename={viz.filename} />
            ) : (
              <FallbackChart data={viz.data} filename={viz.filename} />
            )}
            
            {/* Metadata footer */}
            <div className="mt-2 text-xs text-gray-500 text-center">
              Created: {new Date(viz.created_at).toLocaleString()}
            </div>
          </div>
        ))}
      </div>

      {/* Footer note */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-start space-x-2">
          <svg className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
          </svg>
          <div>
            <p className="text-sm text-blue-800">
              <strong>Interactive Features:</strong> These visualizations are fully interactive. You can zoom, pan, hover for details, and use the toolbar to explore your data in depth.
            </p>
            {!plotlyAvailable && (
              <p className="text-sm text-blue-700 mt-1">
                <strong>Note:</strong> Install plotly.js-dist-min for full interactive visualization support: <code className="bg-blue-100 px-1 rounded">npm install plotly.js-dist-min</code>
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VisualizationDisplay;